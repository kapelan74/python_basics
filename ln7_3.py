"""
3. Реализовать программу работы с органическими клетками, состоящими из ячеек. 
   Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, 
   соответствующий количеству ячеек клетки (целое число). В классе должны быть 
   реализованы методы перегрузки арифметических операторов: сложение (__add__()), 
   вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные 
   методы должны применяться только к клеткам и выполнять увеличение, уменьшение, 
   умножение и целочисленное (с округлением до целого) деление клеток, соответственно.

   Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться 
   сумме ячеек исходных двух клеток.
   Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность 
   количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
   Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как 
   произведение количества ячеек этих двух клеток.
   Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как 
   целочисленное деление количества ячеек этих двух клеток.

   В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и 
   количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.

   Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек 
   между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, 
   то в последний ряд записываются все оставшиеся.

   Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. 
   Тогда метод make_order() вернёт строку: *****\n*****\n**.

   Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда 
   метод make_order() вернёт строку: *****\n*****\n*****.
"""

class Cell:
   def __init__(self, count: int):
      self.__count = count

   def __add__(self, other):
      return f'Сложение клеток = {self.__count + other.__count} ячеек'

   def __sub__(self, other):
      if self.__count > other.__count:
         return f'Вычитание клеток = {self.__count - other.__count} ячеек'
      else:
         return f'Нельзя вычитать из меньшего числа!'

   def __mul__(self, other):
      return f'Умножние клеток = {self.__count * other.__count} ячеек'

   def __truediv__(self, other):
      return f'Деление клеток = {self.__count // other.__count} ячеек'

   def make_order(self, num_of_cells: int) -> str:
      rows = self.__count // num_of_cells
      residue = self.__count % num_of_cells
      return '\n'.join(['*' * num_of_cells] * rows + (['*' * residue] if residue else []))

   def __str__(self) -> str:
      return f"Клетка состоит из {self.__count} ячеек"


c1 = Cell(25)
c2 = Cell(15)

print(c1)
print(c2)

print(c1.__add__(c2))
print(c1.__sub__(c2))
print(c2.__sub__(c1))
print(c1.__mul__(c2))
print(c1.__truediv__(c2))

print(c1.make_order(10))

